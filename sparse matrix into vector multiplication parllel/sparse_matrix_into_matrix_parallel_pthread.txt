// conclusion -- program is running best for 1 thread beacuse initializing more than that waste time in thread creation and destruction and in context switching. Thread will be effecient for larger inputs.

#include<bits/stdc++.h>
#include<pthread.h>
#include<omp.h>
using namespace std;

vector<int> rows;
vector<int> columns;
vector<double> values;
vector<vector<double>> matrix;
vector<vector<double>> mul_seq;
vector<vector<double>> mul_pth;
vector<vector<double>> mul_omp;
int n;

void * fun(void *);

int main(int argc, char* argv[]){
	// Open the file:
	ifstream fin("inputfile.mtx");

	// Ignore headers and comments:
	while (fin.peek() == '%') fin.ignore(2048, '\n');

	// Read defining parameters:
	fin >> n >> n >> n;
	
	// input sparse matrix
	for(int i=0;i<n;i++){
		double t1,t2,t3;
		fin >> t1 >> t2 >> t3;
		rows.push_back(t1);
		columns.push_back(t2);
		values.push_back(t3);
	}
	
	// taking input of matrix
	matrix=vector<vector<double>>(n,vector<double>(n,0));
	int i=0,j=0;
	
	// input matrix text file:
	ifstream infile( "matrix.txt",ifstream::in);
	string line;
	while(getline(infile,line)){
		stringstream linestream(line);
		string value;
		while(getline(linestream,value,',')){
			matrix[i][j]=atof(value.c_str());
			j++;
			if(j==n){
				i++;
				j=0;
			}
		}
	}
	
	mul_seq=vector<vector<double>>(n,vector<double>(n,0.0));
	mul_pth=vector<vector<double>>(n,vector<double>(n,0.0));
	mul_omp=vector<vector<double>>(n,vector<double>(n,0.0));
	
	clock_t start, end, time_taken_sequential;
	// mutliplication in sequential 
	start=clock();
	for(int i=0;i<n;i++){          // traversing sparse matrix
		for(int mat_row=0;mat_row<n;mat_row++){      //   rows of matrix
			mul_seq[mat_row][columns[i]]+=matrix[mat_row][rows[i]]*values[i];
		}
	}
	end=clock();
    time_taken_sequential=end-start;
    cout << "Sequential time - " << time_taken_sequential << "\n";
    
	 //multiplication in parallel with pthread
	pthread_t tid[rows.size()];   
	       
	clock_t start_i, end_i, time_taken_pthread;
	start_i=clock();
	for(int i = 0; i <4; i++) {
		pthread_create(&tid[i], NULL, fun, (void*)(intptr_t)i);
	}
	for(int i = 0; i<4; i++) {
		pthread_join(tid[i],NULL);
	}
	end_i=clock();
	time_taken_pthread=end_i-start_i;
	cout << "time taken for 4 threads " << time_taken_pthread << "\n";
	
	// matrix multiplication with omp
	clock_t start_omp, end_omp, time_taken_omp;
	start_omp=clock();
	# pragma omp parallel for num_threads(4) collapse(2)
	for(int i=0;i<n;i++){          // traversing sparse matrix
		for(int mat_row=0;mat_row<n;mat_row++){      //   rows of matrix
			mul_omp[mat_row][columns[i]]+=matrix[mat_row][rows[i]]*values[i];
		}
	}
	end_omp=clock();
	time_taken_omp=end_omp-start_omp;
	cout << "time taken by omp " << time_taken_omp << "\n";
	
}

void* fun(void *arg){
	int idx = (intptr_t)arg;
	int row = rows[idx];
	int col = columns[idx];
	int val = values[idx];
	
	for(int mat_row = 0; mat_row < n; mat_row++) {      //   rows of matrix
		mul_pth[mat_row][col] += matrix[mat_row][row] * val;
	}
	pthread_exit(0);
}